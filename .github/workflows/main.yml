# .github/workflows/main.yml

# Name of your workflow.
name: main

# Trigger the workflow manually or after push a commit
on: [ push, pull_request ]

# 2 jobs are configured.
# The first one runs tests on iOS devices.
# The second runs tests on Android devices
jobs:

  # job responsible for running Flutter tests on iOS devices
  ios:
    # Creates a build matrix for your jobs. You can define different variations of an environment to run each job
    strategy:
      matrix:
        device:
          # The available simulators are listed by the "xcrun xctrace list devices" command
          - "iPhone 11 Simulator (15.2)" # the name of the simulator could be different depending on the macos version you are using
      # if one of the jobs in the matrix expansion fails, the rest of the jobs will be cancelled
      fail-fast: true
    runs-on: macOS-latest # or macos-latest if you prefer, but be aware that the available simulators could be different if you run a different version
    steps:
      - name: "List all simulators"
        run: "xcrun xctrace list devices"
      - name: "Start Simulator"
        # the command "xcrun simctl boot" expects a device identifier
        # the assignment of the UDID variable consists of retrieving the ID of the simulator
        # by extracting it from the command "xcrun xctrace list devices"
        run: |
          UDID=$(xcrun xctrace list devices | grep "^${{ matrix.device }}" | awk '{gsub(/[()]/,""); print $NF}')
          echo $UDID
          xcrun simctl boot "${UDID:?No Simulator with this name found}"
      - uses: actions/checkout@v3
      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          # instead of "channel: stable", you could be more precise by specifying the exact version of Flutter you're using:
          # flutter-version: '<FLUTTER_VERSION>'
      - name: Check Xcode is installed
        run: xcodebuild -version
      # - name: Install Flutter dependencies
      #   run: flutter pub get
      # # Unit Tests
      # - name: Run Unit Tests
      #   run: flutter test
      # # Integration Test
      # - name: Run integration Tests
      #   run: flutter test integration_test --verbose

  # job responsible for running Flutter tests on Android devices
  android:
    runs-on: macOS-latest
    strategy:
      matrix:
        api-level:
          - 33
          # you can add more API level if you want to run your tests on different API
      fail-fast: true
    steps:
      - uses: actions/checkout@v3
      # Set Up Java
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
      # Set Up Flutter environment
      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: stable # instead of "channel: stable", you could be more precise by specifying the exact version of Flutter you're using:
          # flutter-version: '<FLUTTER_VERSION>'
      # - name: Install Flutter dependencies
      #   run: flutter pub get
      # # Unit Tests
      # - name: Run Unit Tests
      #   run: flutter test
      # # Integration Test
      # - name: Run Integration Tests
      #   # more info on https://github.com/ReactiveCircus/android-emulator-runner
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     api-level: ${{ matrix.api-level }}
      #     arch: x86_64
      #     profile: Nexus 6
      #     script: flutter test integration_test --verbose
